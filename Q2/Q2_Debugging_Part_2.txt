Question 2 - Debugging 

Part 2 - Splay Table Problem
Identify the errors in the 3 tables and provide a fix for each 
Inside Q2/db
Run
q .

t1:
Inside t1 there is no .d file so the table is displaying incorrectly as a dictionary like the following:

q)(get `:t1)
price| 9.367503 2.782122 2.392341 1.508133 1.567317 9.785 7.043314 9.441671 7..
size | 12       10       1        90       73       90    43       90       8..
sym  | A        B        A        B        C        A     C        B        A..

We can fix this by using the flip function like the following:
q)flip (get `:t1)
price     size sym
------------------
9.367503  12   A  
2.782122  10   B  
2.392341  1    A  
1.508133  90   B  
1.567317  73   C  
9.785     90   A  
7.043314  43   C  
9.441671  90   B  
7.833686  84   A  
4.099561  63   C  
6.108817  93   A  
4.976492  54   A  
4.087545  38   A  
4.49731   97   B  
0.1392076 88   A  
7.148779  58   B  
1.946509  68   C  
0.9059026 45   C  
6.203014  2    C  
9.326316  39   A  
..

We can use this to save down the flipped dictionary as the new fixed table:
q)`:t1New/ set flip (get `:t1)
q)(get `:t1New)
price     size sym
------------------
9.367503  12   A  
2.782122  10   B  
2.392341  1    A  
1.508133  90   B  
1.567317  73   C  
9.785     90   A  
7.043314  43   C  
9.441671  90   B  
7.833686  84   A  
4.099561  63   C  
6.108817  93   A  
4.976492  54   A  
4.087545  38   A  
4.49731   97   B  
0.1392076 88   A  
7.148779  58   B  
1.946509  68   C  
0.9059026 45   C  
6.203014  2    C  
9.326316  39   A  
..

t2:
t2 is returning a length error when trying to retreive it 
q)(get `:t2)
'length
  [0]  (get `:t2)
        ^
If we cd into t2 and check the columns we will see that price has a row count lower than the other columns 
q)\cd t2/
q)\ls
"price"
"size"
"sym"
q)count get `:price
24
q)count get `:size
25
q)count get `:sym
25

We can fix this by adding a null value to price to have it be the same length as the others:
q)\cd ..
q)price:get `:t2/price
q)price
1.691043 3.941082 7.263142 9.216436 1.809536 6.434637 2.907093 0.7347808 3.15..

Check the datatype of price to see what type the null should be:
q)type each price
-9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9h
q)price,:0f
q)count price
25

q)sym:get `:t2/sym
q)sym
`sym!0 1 0 1 2 0 2 1 0 2 0 0 0 1 0 1 2 2 2 0 1 1 2 1 0
q)size:get `:t2/size
q)size
12 10 1 90 73 90 43 90 84 63 93 54 38 97 88 58 68 45 2 39 64 49 82 40 88

Use flip to view the newly fixed table, then save this as the new t2
q)flip `sym`price`size!(sym;price;size)
sym price     size
------------------
0   1.691043  12  
1   3.941082  10  
0   7.263142  1   
1   9.216436  90  
2   1.809536  73  
0   6.434637  90  
2   2.907093  43  
1   0.7347808 90

q)`:t2 set flip `sym`price`size!(sym;price;size)
`:t2

t2 now fixed

q)get `:t2
sym price     size
------------------
0   1.691043  12  
1   3.941082  10  
0   7.263142  1   
1   9.216436  90  
2   1.809536  73  
0   6.434637  90  
2   2.907093  43  
1   0.7347808 90  
0   3.159526  84  
2   3.410485  63  
0   8.617972  93  
0   5.548864  54  
0   0.6165008 38  
1   2.85799   97  
0   6.684724  88  
1   9.133033  58  
2   1.485357  68  
2   4.857547  45  
2   7.123602  2   
0   3.839461  39  
..

t3:
Running `:t3 set t3
'splay
  [0]  `:t3 set t3
            ^
This means there is a unimplemented op on a splayed table 
