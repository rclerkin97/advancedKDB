///////////////////////////////////////////////////////////////////////////////////////
///////////////////     GIT SETUP   /////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

To clone the repository into your linux envirnoment. run:

git clone https://github.com/rclerkin97/advancedKDB.git

This will create a folder called "advancedKDB"

Set the path to this folder as $advancedKDB using:

export advancedKDB="$(dirname "$dir")"

/////////////////////////////   Created by Ross Clerkin   /////////////////////////////
/////////////////////////////     QUESTION 1 - TICK       /////////////////////////////

/////////////////////////////    PART 1 - TICKER PLANT   /////////////////////////////

GCP Directory 
/home/rclerkin_kx_com/advancedKDB

$advancedKDB/tickerplant.q

Manual Commands to run tickerplant

In a linux envirnoment inside "$advancedKDB" run:

export advancedKDB="$(dirname "$dir")"
export tpPort=5000
echo $tpPort
5000

q $advancedKDB/tickerplant.q sym . -p $tpPort

___________________________________________________

/////////////////////////////   PART 2 - RDB   /////////////////////////////
$advancedKDB/tick/rdbTQ.q
$advancedKDB/tick/rdbAGG.q

Manual Commands for running the Trade Quote and aggregation RDBs

In a linux envirnoment inside "$advancedKDB" run:
export advancedKDB="$(dirname "$dir")"
export tpPort=5000
echo $tpPort
5000
q $advancedKDB/tick/rdbTQ.q localhost:$tpPort

export advancedKDB="$(dirname "$dir")"
export tpPort=5000
echo $tpPort
5000
q $advancedKDB/tick/rdbAGG.q localhost:$tpPort

___________________________________________________

//////////////////////////   PART 3 - FEED HANDLER  /////////////////////////////
$advancedKDB/tick/feedHandler.q

Manual Commands to run the Feedhandler

In a seperate linux envirnoment inside "$advancedKDB" run:
export advancedKDB="$(dirname "$dir")"
export tpPort=5000
echo $tpPort
5000
q $advancedKDB/tick/feedHandler.q

___________________________________________________

//////////////////////////   PART 4 - CEP  /////////////////////////////
$advancedKDB/tick/cep.q

Manual Commands to run the Complex Event Processor

In a linux envirnoment inside "$advancedKDB" run:
export advancedKDB="$(dirname "$dir")"
export tpPort=5000
echo $tpPort
5000
q $advancedKDB/tick/cep.q localhost:$tpPort

___________________________________________________

//////////////////////////   PART 5 - LOGGING  /////////////////////////////
$advancedKDB/logging.q

The logging script is here: 
$advancedKDB/logging.q

The logs themselves are located here:
$advancedKDB/logs

___________________________________________________

//////////////////////////   PART 6 - STARTUP/SHUTDOWN SCRIPTS  /////////////////////////////
$advancedKDB/scripts/start.sh
$advancedKDB/scripts/test.sh
$advancedKDB/scripts/stop.sh

To use these scripts, first ensure there are no processes running on the port: 5000
You can always change this port for another in AdvancedKDB/scripts/config
Also in scripts/config.sh, make sure Q (the q home directory) and q (theq executable has been set)

To start the processes run (you will see options for yes or no for what you would like to start):
bash start.sh
To stop the processes run  (you will see options for yes or no for what you would like to stop):
bash stop.sh
To test the processes run:
bash test.sh

___________________________________________________

//////////////////////////   PART 7 -TICKERPLANT LOG REPLAY  /////////////////////////////
$advancedKDB/tpLogReplay.q

The tickerplant logs will be in starting folder

q tpLogReplay.q sym2023.05.03

___________________________________________________

//////////////////////////   PART 8 - CSV FILE LOAD  /////////////////////////////
$advancedKDB/CSVFileLoader.q

To load a new csv file into the TP
q CSVReader.q [table] [csv file] [port number]

q CSVFileLoader.q trade trade.csv 5000

___________________________________________________

//////////////////////////   PART 9 - EOD Process  /////////////////////////////
$advancedKDB/tick/hdbEOD.q

Move into the tick dir: $advancedKDB/tick/

To run the EOD process and update the HDB

Change the sym date in the command to todays date 

q hdbEOD.q ../sym2023.05.03

When using the previously created bash scripts, as the sym dated file will be created in the same directory as the scripts it runs in, the command will look like this:

q hdbEOD.q ../scripts/sym2023.05.10
___________________________________________________

//////////////////////////   PART 10 - SCHEMA CHANGE   /////////////////////////////
Answer can be found here:

https://github.com/rclerkin97/advancedKDB/blob/main/schemaChangeAns.txt

QUESTION 1 COMPLETE 

___________________________________________________

///////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////   QUESTION 2 - DEBUGGING    /////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////  QUESTION 2 - PART 1    /////////////////////////////

TP/RDB Problem

Answer can be found here:
https://github.com/rclerkin97/advancedKDB/blob/main/Q2/Q2_Debugging_Part_1.txt

___________________________________________________

/////////////////////////////  QUESTION 2 - PART 2    /////////////////////////////

Splay Table Problem 

Answer can be found here:
https://github.com/rclerkin97/advancedKDB/blob/main/Q2/Q2_Debugging_Part_2.txt

___________________________________________________

/////////////////////////////  QUESTION 2 - PART 3    /////////////////////////////

Blocking Calls

Answer can be found here:
https://github.com/rclerkin97/advancedKDB/blob/main/Q2/Q2_Debugging_Part_3.txt

___________________________________________________

/////////////////////////////  QUESTION 2 - PART 4    /////////////////////////////

Query Performance

Answer can be found here:
https://github.com/rclerkin97/advancedKDB/blob/main/Q2/Q2_Debugging_Part_4.txt

QUESTION 2 COMPLETE 

___________________________________________________

///////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////   QUESTION 3 - API    /////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////  QUESTION 3 - PART 1    /////////////////////////////

Python API

The python API for loading the file can be found here
https://github.com/rclerkin97/advancedKDB/tree/main/Q3/pythonAPI

Change the hostname and port and csv filepath to match the setup you have been using inside: 
$advancedKDB/Q3/pythonAPI/CSVFileLoader.py

To run the API
python CSVFileLoader.py

___________________________________________________

/////////////////////////////  QUESTION 3 - PART 2    /////////////////////////////

Web Interface - HTML5

With the tickerplant running, edit the hostname and port to the ones you are using in: $advancedKDB/Q3/webInterface/simpleWebPage.html

Open simpleWebPage.html in a browser, connect and type in the name of the ticker you are searching for e.g. GS.N
